cmake_minimum_required(VERSION 3.0)
project(Glad)

message("")
message("==== Glad ====")

set(OpenGL_GL_PREFERENCE "GLVND")
set(SOURCES "${CMAKE_CURRENT_SOURCE_DIR}/include/glad/glad.h" "${CMAKE_CURRENT_SOURCE_DIR}/src/glad.c")
set(INCLUDE_DIR "${CMAKE_CURRENT_SOURCE_DIR}/include")

# Glad dependencies
find_package(OpenGL REQUIRED)

# Make lib
add_library(glad STATIC ${SOURCES})
add_library(glad::glad ALIAS glad)
target_include_directories(glad PUBLIC ${INCLUDE_DIR})
target_link_libraries(glad 
    PUBLIC ${OPENGL_LIBRARIES} ${CMAKE_DL_LIBS}
)

# Print Glad version
if(EXISTS "${CMAKE_CURRENT_SOURCE_DIR}/include/glad/glad.h")
  file(STRINGS "${CMAKE_CURRENT_SOURCE_DIR}/include/glad/glad.h" GLAD_VERSION_LINE REGEX "^[ \t]+OpenGL loader generated by glad [0-9.]*")
  string(REGEX REPLACE "^[ \t]+OpenGL loader generated by glad ([0-9.]*)(.*)" "\\1" GLAD_VERSION "${GLAD_VERSION_LINE}")
  message(STATUS "GLAD_VERSION: ${GLAD_VERSION}")
  unset(GLAD_VERSION_LINE)
  unset(GLAD_VERSION)
endif()
message(STATUS "Includes: ${INCLUDE_DIR}")

# Source group generation for IDEs
foreach (SOURCE IN ITEMS ${SOURCES})
    get_filename_component(SOURCE_PATH "${SOURCE}" PATH)
    file(RELATIVE_PATH SOURCE_PATH_REL "${CMAKE_CURRENT_SOURCE_DIR}" "${SOURCE_PATH}")
    string(REPLACE "/" "\\" GROUP_PATH "${SOURCE_PATH_REL}")
    source_group("${GROUP_PATH}" FILES "${SOURCE}")
endforeach ()

